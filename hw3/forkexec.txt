1.  The program is expecting an argument passed in which is the program to be run.  It starts out by printing the program name and its pid.  Then it sleeps for 30 seconds.  At that point, if there wasn't an argument provided, it prints the issue and exits.  If there was an argument, it calls execve on that argument passed in.  Execve will then run a new program.
2.  The final prinf will only be executed if a bad argument is passed in.  If no argument is passed in, it will print an error and exit.  If a good argument is passed in, it will run that program and won't return back to this one to print "End of program ...".  Only when a bad argument is passed in will it return to exec to print "End of program ...".
3.  Commands: ./exec /bin/cat
    Output: Program "./exec" has pid 2476743. Sleeping.
            Running exec of "/bin/cat"
            (Then it just reprints whatever is entered as input)
4.  Commands: ps -q 2481914 -o user,pid,ppid,state,ucmd
    Output (before):  USER      PID       PPID      S   CMD
                      abrigham  2481914   2472496   S   exec
    Output (after):   USER      PID       PPID      S   CMD
                      abrigham  2481914   2472496   S   cat
5.  Before and after, the commands have the same user, pid, ppd, and s.  However, they differ in their commands (before is exec, after is cat).  This happens because execve call the new process passed in and replaces the running process with it.  Because it's still the same process, the pid and ppid stay the same.
6.  Output: Program "./exec" has pid 2484788. Sleeping.
            No program to exec.  Exiting...
    This time, it runs the initial print statement that prints out exec (since that's the initial program being run) and its pid.  It then sleeps for 30 seconds.  After sleeping, it checks to see if an command line argument was passed in.  Since it received no arguments, it prints that there's no program to execute and exits.
7.  Fork.c starts the program and prints its pid.  Then it forks, and if there's an error forking (the forked process id is less than 0), it will print the error and exit.  Afterwards, it will print the parent and child ids, then sleep 30 seconds.  Then it runs code in the child which prints section B, sleeps, prints done, then exits.  Section C is for the parent only, and that will run, doing exactly the same thing as B, but it sleeps for 60 seconds instead.  Lastly, both the parent and child run section D, which prints then sleeps 30 seconds.
8.  Section A - Parent & Child
    Section B - Child
    Section C - Parent
    Section D - Parent & Child
9.  First Window
      Command:  ./fork
      Output:   Starting program; process has pid 2497643
                Section A;  pid 2497643
                Section A;  pid 2497644
                Section C
                Section B
                Section B done sleeping
                Section C done sleeping
    Second Window
      Command (before): ps -p 2497643,2497644 -o user,pid,ppid,state,ucmd --forest
      Output (before):  USER      PID       PPID      S   CMD
                        abrigham  2497643   2472496   S   fork
                        abrigham  2497644   2497643   S   \_ fork
      Command (after):  ps -p 2497643,2497644 -o user,pid,ppid,state,ucmd --forest
      Output (after):   USER      PID       PPID      S   CMD
                        abrigham  2497643   2472496   S   fork
                        abrigham  2497644   2497643   Z   \_ fork <defunct>
10. The 2 ps commands have the same users, pids, and ppids.  They differ however in their S (state) columns and CMD (columns).  For the command before, it says that the state is Sleep for both the parent and child, which makes sense since right after the fork they jump into sleep functions.  On the second command after B (child) is done sleeping, the parent is still asleep for another 30 seconds, yet surprisingly the ps command not only returns the parent, but also returns the child, but it's in a zombie state (since it's been exited/killed but the parent is still active).
11. If you put a `wait(NULL)` in section C between the 2 sleep commands, that will resolve it.  That will make it so both the parent and child sleep for 30 seconds, but this time the parent will wait for the child to exit, then since it's already waiting it will be able to clean up the child immediately before proceeding to wait another 30 seconds.  That's why on the second command it doesn't show the child anymore, because by then the parent has effectively cleaned it up.
12. First Window
      Command:  ./fork
      Output:   Section A;  pid 2509682
                Section A;  pid 2509683
                Section C
                Section B
                Section C done sleeping
    Second Window
      Command (before):   ps -p 2509682,2509683 -o user,pid,ppid,state,ucmd --forest
      Output (before):    USER        PID       PPID      S   CMD
                          abrigham    2509682   2472496   S   fork
                          abrigham    2509683   2509682   S   \_ fork
      Command (after):    ps -p 2509682,2509683 -o user,pid,ppid,state,ucmd --forest
      Output (after):     USER        PID       PPID      S   CMD
                          abrigham    2509683   1         S   fork
13. For these commands, both times they show the child pid, indicating the child process is running.  With this version of the program, both parent and child sleep 30 seconds, then the parent is done sleeping and exits, but the child still has to sleep another 30 seconds.  So even though at this point the first window shows that the program is done running, the right window ps shows that the child process is still running behind the scenes until the 30 seconds is up and it stops sleeping then exits.
