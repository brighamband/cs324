1.  The program is expecting an argument passed in which is the program to be run.  It starts out by printing the program name and its pid.  Then it sleeps for 30 seconds.  At that point, if there wasn't an argument provided, it prints the issue and exits.  If there was an argument, it calls execve on that argument passed in.  Execve will then run a new program.
2.  The final prinf will only be executed if a bad argument is passed in.  If no argument is passed in, it will print an error and exit.  If a good argument is passed in, it will run that program and won't return back to this one to print "End of program ...".  Only when a bad argument is passed in will it return to exec to print "End of program ...".
3.  Commands: ./exec /bin/cat
    Output: Program "./exec" has pid 2476743. Sleeping.
            Running exec of "/bin/cat"
            (Then it just reprints whatever is entered as input)
4.  Commands: ps -q 2481914 -o user,pid,ppid,state,ucmd
    Output (before):  USER      PID       PPID      S   CMD
                      abrigham  2481914   2472496   S   exec
    Output (after):   USER      PID       PPID      S   CMD
                      abrigham  2481914   2472496   S   cat
5.  Before and after, the commands have the same user, pid, ppd, and s.  However, they differ in their commands (before is exec, after is cat).  This happens because execve call the new process passed in and replaces the running process with it.  Because it's still the same process, the pid and ppid stay the same.
 